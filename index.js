// index.js ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π webhook —Å —Å–µ–∫—Ä–µ—Ç–æ–º –∏ –Ω–∞–¥—ë–∂–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');

const TOKEN  = process.env.BOT_TOKEN;
const BASE   = process.env.WEBHOOK_URL;     // https://‚Ä¶up.railway.app
const PATH   = process.env.WH_PATH;         // –Ω–∞–ø—Ä. "/tg/ab12cd34"
const SECRET = process.env.WH_SECRET;       // –Ω–∞–ø—Ä. "s3cr3t_XYZ"
const PORT   = Number(process.env.PORT || 8080);

if (!TOKEN || !BASE || !PATH || !SECRET) {
  throw new Error('ENV missing: BOT_TOKEN / WEBHOOK_URL / WH_PATH / WH_SECRET');
}

const app = express();
app.use(express.json({ limit: '2mb' }));

// –û–¥–∏–Ω –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ webhook
const bot = new TelegramBot(TOKEN, { webHook: { autoOpen: false } });
const hookUrl = `${BASE}${PATH}`;

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ API
const safeSend = (chatId, text, opts) =>
  bot.sendMessage(chatId, text, opts).catch(err => {
    console.error('sendMessage error:', err?.response?.body || err);
  });

// === –ë–ê–ó–ê –î–ê–ù–ù–´–• (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è MVP) ===
const db = {
  users: {},
  foods: {},
  workouts: {}
};

const ensureUser = (chatId) => {
  if (!db.users[chatId]) {
    db.users[chatId] = {
      chatId,
      name: null,
      plan: null,
      sex: null,
      age: null,
      weight_kg: null,
      height_cm: null,
      steps_level: null,
      goal: null,
      days_per_week: null,
      session_length: null,
      equipment: [],
      dislikes: []
    };
  }
  return db.users[chatId];
};

const setUser = (chatId, data) => {
  db.users[chatId] = { ...db.users[chatId], ...data };
};

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–ù–û–í ===
const mifflinStJeor = (sex, age, weight, height) => {
  const bmr = sex === '–ú' ? 
    10 * weight + 6.25 * height - 5 * age + 5 :
    10 * weight + 6.25 * height - 5 * age - 161;
  return Math.round(bmr);
};

const palFromSteps = (steps) => {
  const stepMap = {
    '–º–µ–Ω–µ–µ 5k': 1.2,
    '5‚Äì8k': 1.375,
    '8‚Äì10k': 1.55,
    '10k+': 1.725
  };
  return stepMap[steps] || 1.375;
};

const kcalByGoal = (tdee, goal) => {
  const goalMap = {
    '–ü–æ—Ö—É–¥–µ–Ω–∏–µ': 0.85,
    '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è': 1.0,
    '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã': 1.15
  };
  return Math.round(tdee * (goalMap[goal] || 1.0));
};

const defaultWorkouts = (days, equipment) => {
  const workouts = [];
  const hasWeights = equipment.includes('–≥–∞–Ω—Ç–µ–ª–∏') || equipment.includes('—à—Ç–∞–Ω–≥–∞');
  
  for (let i = 1; i <= days; i++) {
    workouts.push({
      day: i,
      type: i % 2 === 0 ? '–∫–∞—Ä–¥–∏–æ' : '—Å–∏–ª–æ–≤–∞—è',
      exercises: hasWeights ? 
        ['–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', '–ñ–∏–º –ª–µ–∂–∞', '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞'] :
        ['–û—Ç–∂–∏–º–∞–Ω–∏—è', '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', '–ü–ª–∞–Ω–∫–∞'],
      duration: '45-60 –º–∏–Ω'
    });
  }
  return workouts;
};

const createPlanFromAnswers = (answers) => {
  const bmr = mifflinStJeor(answers.sex, answers.age, answers.weight_kg, answers.height_cm);
  const pal = palFromSteps(answers.steps_level);
  const tdee = Math.round(bmr * pal);
  const daily_kcal = kcalByGoal(tdee, answers.goal);
  const protein_g_per_kg = answers.goal === '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã' ? 2.0 : 1.6;
  
  return {
    plan: {
      daily_kcal,
      protein_g_per_kg,
      workouts: defaultWorkouts(answers.days_per_week, answers.equipment),
      goal: answers.goal,
      days_per_week: answers.days_per_week
    }
  };
};

// === –ü–†–û–î–ê–Æ–©–ï–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï ===
const welcomeText = (u) => {
  const kcal  = u?.plan?.daily_kcal ? `~${u.plan.daily_kcal} –∫–∫–∞–ª/–¥–µ–Ω—å` : `–¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∫–∞–ª`;
  const prt   = u?.plan?.protein_g_per_kg ? `${u.plan.protein_g_per_kg} –≥/–∫–≥` : `‚âà1.6 –≥/–∫–≥`;
  const days  = u?.plan?.days_per_week   || 3;
  const water = u?.plan?.water_goal_ml   || 2200;

  return (
`üëã –ü—Ä–∏–≤–µ—Ç, —è –ü–∞–≤–µ–ª - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä!

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã, —Å—á–∏—Ç–∞—é —Ç–≤–æ–∏ –∫–æ–ª–æ—Ä–∏–∏, –¥–∞—é —á–µ—Ç–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–∏–Ω–∞—é, –∫–æ–≥–¥–∞ –Ω–∞–¥–æ.
–û—Å–Ω–æ–≤–∞ ‚Äî –º–µ—Ç–æ–¥–∏–∫–∏ –í–û–ó/ACSM –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∞ –∏ –ø–∏—Ç–∞–Ω–∏—è. –¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è ‚Äî —è –¥—É–º–∞—é –∑–∞ —Ç–µ–±—è.

<b>–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:</b>
‚Ä¢ üèãÔ∏è –°–∏–ª–æ–≤—ã–µ ${days}√ó/–Ω–µ–¥ + –∫–∞—Ä–¥–∏–æ Z2.
‚Ä¢ üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ: ${kcal}, –±–µ–ª–æ–∫ ${prt}.
‚Ä¢ üíß –í–æ–¥–∞: ~${water} –º–ª, üò¥ —Å–æ–Ω ‚©æ 7 —á.
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–≤—Ä–µ–º—è –∏ —á–µ—Å—Ç–Ω—ã–π —Ñ–∏–¥–±—ç–∫ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏.

<b>üöÄ –ü–æ–µ—Ö–∞–ª–∏?</b> –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
‚Äî üìÖ <b>–ü–ª–∞–Ω</b> ‚Äî —Å—Ç–∞—Ä—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏.
‚Äî üçΩÔ∏è <b>–ï–¥–∞</b> ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ (–¥–æ 4/–¥–µ–Ω—å).
‚Äî üìù <b>–û—Ç—á—ë—Ç</b> ‚Äî –Ω–∞–ø–∏—à–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, —è –¥–∞–º —Ñ–∏–¥–±—ç–∫.`
  );
};

// === –ö–õ–ê–í–ò–ê–¢–£–†–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ===
const mainKb = {
  keyboard: [
    [{ text: "üìÖ –ü–ª–∞–Ω" }, { text: "üìù –û—Ç—á—ë—Ç" }],
    [{ text: "üçΩÔ∏è –ï–¥–∞" }, { text: "üíß +250 –º–ª" }],
    [{ text: "üß≠ –ê–Ω–∫–µ—Ç–∞" }, { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }],
    [{ text: "‚ùì –ü–æ–º–æ—â—å" }]
  ],
  resize_keyboard: true,
  is_persistent: true
};

// === –•–ï–ù–î–õ–ï–†–´ ===
bot.on('message', (msg) => {
  console.log('Handler saw message:', msg.message_id, msg.text);
  // –£–±—Ä–∞–ª —ç—Ö–æ - –Ω–µ –∑–∞—Å–æ—Ä—è–µ–º —á–∞—Ç
});

bot.onText(/^\/start$/, (msg) => {
  const u = ensureUser(msg.chat.id);
  if (!u.plan) {
    const answers = {
      sex: u.sex || "–ú", 
      age: u.age || 30, 
      weight_kg: u.weight_kg || 75, 
      height_cm: u.height_cm || 175,
      steps_level: u.steps_level || "5‚Äì8k",
      goal: u.goal || "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è",
      days_per_week: u.days_per_week || 3, 
      session_length: u.session_length || "60 –º–∏–Ω",
      equipment: u.equipment || [], 
      dislikes: u.dislikes || []
    };
    const built = createPlanFromAnswers(answers);
    setUser(u.chatId, { ...built, name: u.name || msg.from.first_name });
  }
  const user = ensureUser(msg.chat.id);
  bot.sendMessage(msg.chat.id, welcomeText(user), { 
    parse_mode: 'HTML', 
    reply_markup: mainKb 
  });
  // –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∫—Ä–µ–∞—Ç–∏–Ω:
  // askCreatine(msg.chat.id);
});

// === HTTP-–º–∞—Ä—à—Ä—É—Ç—ã ===
app.use((req, _res, next) => { console.log('HTTP', req.method, req.url); next(); });

app.post(PATH, (req, res) => {
  // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç Telegram
  if (req.get('X-Telegram-Bot-Api-Secret-Token') !== SECRET) {
    console.warn('Bad secret header'); return res.sendStatus(401);
  }
  console.log('Update:', req.body.update_id, req.body?.message?.text);
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.get('/', (_req, res) => res.status(200).send('OK'));

// === –°—Ç–∞—Ä—Ç –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
app.listen(PORT, '0.0.0.0', async () => {
  // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—É—é –ø—Ä–∏–≤—è–∑–∫—É
  await fetch(`https://api.telegram.org/bot${TOKEN}/deleteWebhook`, { method: 'POST' });
  // —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é –ø—Ä–∏–≤—è–∑–∫—É —Å —Å–µ–∫—Ä–µ—Ç–æ–º –∏ –Ω—É–∂–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞–ø–¥–µ–π—Ç–æ–≤
  await bot.setWebHook(hookUrl, {
    allowed_updates: ['message', 'callback_query'],
    secret_token:     SECRET,  // Telegram –ø—Ä–∏—à–ª—ë—Ç —ç—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
    drop_pending_updates: true
  });
  console.log('Webhook url:', hookUrl);
  console.log('Server listening on', PORT);
});
