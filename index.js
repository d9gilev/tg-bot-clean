// index.js ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π webhook —Å —Å–µ–∫—Ä–µ—Ç–æ–º –∏ –Ω–∞–¥—ë–∂–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');

const TOKEN  = process.env.BOT_TOKEN;
const BASE   = process.env.WEBHOOK_URL;     // https://‚Ä¶up.railway.app
const PATH   = process.env.WH_PATH;         // –Ω–∞–ø—Ä. "/tg/ab12cd34"
const SECRET = process.env.WH_SECRET;       // –Ω–∞–ø—Ä. "s3cr3t_XYZ"
const PORT   = Number(process.env.PORT || 8080);

if (!TOKEN || !BASE || !PATH || !SECRET) {
  throw new Error('ENV missing: BOT_TOKEN / WEBHOOK_URL / WH_PATH / WH_SECRET');
}

const app = express();
app.use(express.json({ limit: '2mb' }));

// –û–¥–∏–Ω –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ webhook
const bot = new TelegramBot(TOKEN, { webHook: { autoOpen: false } });
const hookUrl = `${BASE}${PATH}`;

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ API
const safeSend = (chatId, text, opts) =>
  bot.sendMessage(chatId, text, opts).catch(err => {
    console.error('sendMessage error:', err?.response?.body || err);
  });

// === –ë–ê–ó–ê –î–ê–ù–ù–´–• (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è MVP) ===
const db = { 
  users: {}, 
  food: [], 
  workouts: [] 
};

const ensureUser = (chatId) => {
  if (!db.users[chatId]) {
    db.users[chatId] = { 
      chatId, 
      name: null, 
      tz: "Europe/Amsterdam", 
      plan: null, 
      reminder_mode: "Soft" 
    };
  }
  return db.users[chatId];
};

const setUser = (chatId, patch) => {
  db.users[chatId] = { ...(db.users[chatId] || {}), ...patch };
  return db.users[chatId];
};

// === UI (—ç–∫—Ä–∞–Ω—ã/—Ö–∞–±) ===
const getUI = (u) => { u.ui ??= {}; return u.ui; };

const navKb = (active = 'home') => {
  const b = (id, title) => ({ text: (active === id ? `‚Ä¢ ${title}` : title), callback_data: `nav:${id}` });
  return {
    inline_keyboard: [
      [b('home','üè† –ì–ª–∞–≤–Ω–∞—è'), b('plan','üìÖ –ü–ª–∞–Ω')],
      [b('food','üçΩÔ∏è –ï–¥–∞'), b('reports','üìù –û—Ç—á—ë—Ç—ã')],
      [b('settings','‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
  };
};

const renderScreen = (u, screen = 'home') => {
  const p = u.plan || {};
  if (screen === 'plan') {
    const w = Array.isArray(p.workouts) ? p.workouts.join(' ¬∑ ') : '–µ—â—ë –Ω–µ—Ç';
    return {
      html:
`<b>üìÖ –¢–≤–æ–π –ø–ª–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π</b>
–¶–µ–ª—å: ${p.goal || '‚Äî'}
–°–∏–ª–æ–≤—ã–µ: ${p.days_per_week || '‚Äî'}√ó/–Ω–µ–¥ (${p.session_length || '‚Äî'})
–°—Ö–µ–º–∞: ${w}
–ü–∏—Ç–∞–Ω–∏–µ: ~${p.daily_kcal || '‚Äî'} –∫–∫–∞–ª/–¥–µ–Ω—å, –±–µ–ª–æ–∫ ${p.protein_g_per_kg || '1.6'} –≥/–∫–≥
–í–æ–¥–∞: ~${p.water_goal_ml || 2200} –º–ª, —Å–æ–Ω ‚©æ ${p.sleep_goal_h || 7} —á`,
      kb: navKb('plan')
    };
  }
  if (screen === 'food') {
    return {
      html:
`<b>üçΩÔ∏è –ï–¥–∞</b>
–õ–∏–º–∏—Ç –ø—Ä–∏—ë–º–æ–≤: ${(p.meals_limit ?? 4)}/–¥–µ–Ω—å.
–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω/–æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –∏ —É—á—Ç—É –≤ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–µ.`,
      kb: navKb('food')
    };
  }
  if (screen === 'reports') {
    return {
      html:
`<b>üìù –û—Ç—á—ë—Ç—ã</b>
–ù–∞–∂–º–∏ ¬´üìù –û—Ç—á—ë—Ç¬ª –≤–Ω–∏–∑—É –∏ –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ ‚Äî —è –æ—Ç–≤–µ—á—É <i>–æ–¥–Ω–∏–º, –Ω–æ —ë–º–∫–∏–º</i> –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (–ò–ò).`,
      kb: navKb('reports')
    };
  }
  if (screen === 'settings') {
    const creatine = p.creatine_ok === true ? '–î–∞' : (p.creatine_ok === false ? '–ù–µ—Ç' : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ');
    return {
      html:
`<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>
‚Äî –†–µ–∂–∏–º –ø–∏–Ω–∫–æ–≤: ${u.reminder_mode || 'Soft'}
‚Äî TZ: ${u.tz || 'Europe/Amsterdam'}
‚Äî –ö—Ä–µ–∞—Ç–∏–Ω: ${creatine}`,
      kb: navKb('settings')
    };
  }
  // home
  return {
    html:
`<b>üè† –ì–ª–∞–≤–Ω–∞—è</b>
–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤–æ–¥–∞/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞) –∏ ¬´—Å–ø–æ–∫–∏¬ª.
–í—ã–±–∏—Ä–∞–π —ç–∫—Ä–∞–Ω –Ω–∏–∂–µ: –ø–ª–∞–Ω, –µ–¥–∞, –æ—Ç—á—ë—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`,
    kb: navKb('home')
  };
};

const ensureHubMessage = async (bot, u, screen = 'home') => {
  const ui = getUI(u);
  const { html, kb } = renderScreen(u, screen);

  if (ui.hubMessageId) {
    try {
      await bot.editMessageText(html, {
        chat_id: u.chatId,
        message_id: ui.hubMessageId,
        parse_mode: 'HTML',
        reply_markup: kb
      });
      ui.activeScreen = screen;
      return;
    } catch (e) {
      console.warn('editMessageText failed, resend hub:', e?.response?.body || e.message);
      ui.hubMessageId = null; // –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∏–∂–µ
    }
  }

  const sent = await bot.sendMessage(u.chatId, html, { parse_mode: 'HTML', reply_markup: kb });
  ui.hubMessageId = sent.message_id;
  ui.activeScreen = screen;
  try { await bot.pinChatMessage(u.chatId, sent.message_id); } catch (e) {
    console.log('pinChatMessage skipped:', e?.response?.body || e.message);
  }
};

// === –ú–ò–ù–ò-–û–ù–ë–û–†–î–ò–ù–ì ===
const ONB_QUESTIONS = [
  { key:"name",         type:"text",   q:"–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" },
  { key:"sex",          type:"single", q:"–ü–æ–ª:", opts:["–ú","–ñ"] },
  { key:"age",          type:"number", q:"–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", min:14, max:90 },
  { key:"height_cm",    type:"number", q:"–†–æ—Å—Ç (—Å–º):",     min:130, max:220 },
  { key:"weight_kg",    type:"number", q:"–í–µ—Å (–∫–≥):",      min:35,  max:250 },
  { key:"steps_level",  type:"single", q:"–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—à–∞–≥–æ–≤/–¥–µ–Ω—å):", opts:["<5k","5‚Äì8k","8‚Äì11k",">11k"] },
  { key:"goal",         type:"single", q:"–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å:", opts:["–ü–æ—Ö—É–¥–µ–Ω–∏–µ","–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã","–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è","–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"] },
  { key:"days_per_week",type:"number", q:"–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é?", min:1, max:6 },
  { key:"session_length",type:"single", q:"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", opts:["60 –º–∏–Ω","75 –º–∏–Ω","90 –º–∏–Ω"] },
  { key:"equipment",    type:"text",   q:"–ì–¥–µ/—á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ? –í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–∑ —Å–ø–∏—Å–∫–∞:\n–î–æ–º, –ó–∞–ª, –£–ª–∏—Ü–∞, –®—Ç–∞–Ω–≥–∞, –ì–∞–Ω—Ç–µ–ª–∏, –¢—Ä–µ–Ω–∞–∂—ë—Ä—ã, –¢—É—Ä–Ω–∏–∫, –≠—Å–ø–∞–Ω–¥–µ—Ä—ã, –î–æ—Ä–æ–∂–∫–∞/–≤–µ–ª–æ, –ë–∞—Å—Å–µ–π–Ω" },
  { key:"dislikes",     type:"text",   q:"–ß—Ç–æ –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è/–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" }
];

const onbState = {}; // per chat: {i, answers}

const askNext = (chatId) => {
  const st = onbState[chatId];
  const step = ONB_QUESTIONS[st.i];
  if (!step) return;
  if (step.type === "single") {
    bot.sendMessage(chatId, step.q, { 
      reply_markup: { 
        keyboard: [step.opts.map(o=>({text:o}))], 
        resize_keyboard:true, 
        one_time_keyboard:true 
      } 
    });
  } else {
    bot.sendMessage(chatId, step.q, { 
      reply_markup: { remove_keyboard: true } 
    });
  }
};

const validate = (step, text) => {
  if (step.type==="number"){
    const n = Number((text||"").replace(",","."));
    if (Number.isNaN(n)) return { ok:false, err:"–ù—É–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞." };
    if (step.min && n < step.min) return { ok:false, err:`–ú–∏–Ω–∏–º—É–º ${step.min}.` };
    if (step.max && n > step.max) return { ok:false, err:`–ú–∞–∫—Å–∏–º—É–º ${step.max}.` };
    return { ok:true, val:n };
  }
  if (step.type==="single"){
    if (!step.opts.includes(text)) return { ok:false, err:"–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ." };
    return { ok:true, val:text };
  }
  // text
  const v = (text||"").trim();
  if (!v) return { ok:false, err:"–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º." };
  return { ok:true, val:v };
};

// === –ì–ï–ù–ï–†–ê–¢–û–† –ü–õ–ê–ù–ê ===
const mifflinStJeor = ({ sex, weight, height, age }) => {
  const s = (sex === "–ú" || sex === "M") ? 5 : -161;
  return Math.round(10 * weight + 6.25 * height - 5 * age + s); // RMR
};

const palFromSteps = (steps_level) => { 
  return {"<5k":1.3,"5‚Äì8k":1.45,"8‚Äì11k":1.6,">11k":1.75}[steps_level] || 1.4; 
};

const kcalByGoal = (tdee, goal) => { 
  if(goal==="–ü–æ—Ö—É–¥–µ–Ω–∏–µ") return Math.round(tdee*0.85); 
  if(goal==="–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã") return Math.round(tdee*1.10); 
  return Math.round(tdee); 
};

const defaultWorkouts = (days) => { 
  const map={2:["Full Body A","Full Body B"],3:["Upper","Lower","Full"],4:["Upper","Lower","Push","Pull"]}; 
  return map[days]||map[3]; 
};

const createPlanFromAnswers = (a) => {
  const rmr  = mifflinStJeor({ sex:a.sex, weight:+a.weight_kg||70, height:+a.height_cm||170, age:+a.age||30 });
  const tdee = Math.round(rmr * palFromSteps(a.steps_level));
  const daily_kcal = kcalByGoal(tdee, a.goal);

  const plan = {
    goal: a.goal,
    days_per_week: +a.days_per_week || 3,
    session_length: a.session_length || "60 –º–∏–Ω",
    equipment: Array.isArray(a.equipment) ? a.equipment : String(a.equipment||"").split(",").map(s=>s.trim()).filter(Boolean),
    dislikes: Array.isArray(a.dislikes) ? a.dislikes : String(a.dislikes||"").split(",").map(s=>s.trim()).filter(Boolean),
    daily_kcal,
    protein_g_per_kg: 1.6,
    meals_limit: 4,
    water_goal_ml: 2200,
    sleep_goal_h: 7,
    workouts: defaultWorkouts(+a.days_per_week || 3), // —Ç–∏–ø—ã —Å–µ—Å—Å–∏–π
    goodnight_window: "23:00¬±10m",
    creatine_ok: a.creatine_ok ?? null
  };

  const start = new Date(); const end = new Date(); end.setDate(start.getDate()+30);
  return { plan, plan_start: start.toISOString(), plan_end: end.toISOString(), plan_status:"active" };
};

// === –ü–†–û–î–ê–Æ–©–ï–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï ===
const welcomeText = (u) => {
  const kcal  = u?.plan?.daily_kcal ? `~${u.plan.daily_kcal} –∫–∫–∞–ª/–¥–µ–Ω—å` : `–¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∫–∞–ª`;
  const prt   = u?.plan?.protein_g_per_kg ? `${u.plan.protein_g_per_kg} –≥/–∫–≥` : `‚âà1.6 –≥/–∫–≥`;
  const days  = u?.plan?.days_per_week   || 3;
  const water = u?.plan?.water_goal_ml   || 2200;

  return (
`üëã –ü—Ä–∏–≤–µ—Ç, —è –ü–∞–≤–µ–ª - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä!

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã, —Å—á–∏—Ç–∞—é —Ç–≤–æ–∏ –∫–æ–ª–æ—Ä–∏–∏, –¥–∞—é —á–µ—Ç–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–∏–Ω–∞—é, –∫–æ–≥–¥–∞ –Ω–∞–¥–æ.
–û—Å–Ω–æ–≤–∞ ‚Äî –º–µ—Ç–æ–¥–∏–∫–∏ –í–û–ó/ACSM –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∞ –∏ –ø–∏—Ç–∞–Ω–∏—è. –¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è ‚Äî —è –¥—É–º–∞—é –∑–∞ —Ç–µ–±—è.

<b>–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:</b>
‚Ä¢ üèãÔ∏è –°–∏–ª–æ–≤—ã–µ ${days}√ó/–Ω–µ–¥ + –∫–∞—Ä–¥–∏–æ Z2.
‚Ä¢ üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ: ${kcal}, –±–µ–ª–æ–∫ ${prt}.
‚Ä¢ üíß –í–æ–¥–∞: ~${water} –º–ª, üò¥ —Å–æ–Ω ‚©æ 7 —á.
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–≤—Ä–µ–º—è –∏ —á–µ—Å—Ç–Ω—ã–π —Ñ–∏–¥–±—ç–∫ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏.

<b>üöÄ –ü–æ–µ—Ö–∞–ª–∏?</b> –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
‚Äî üìÖ <b>–ü–ª–∞–Ω</b> ‚Äî —Å—Ç–∞—Ä—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏.
‚Äî üçΩÔ∏è <b>–ï–¥–∞</b> ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–π –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ (–¥–æ 4/–¥–µ–Ω—å).
‚Äî üìù <b>–û—Ç—á—ë—Ç</b> ‚Äî –Ω–∞–ø–∏—à–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, —è –¥–∞–º —Ñ–∏–¥–±—ç–∫.`
  );
};

// === –ö–õ–ê–í–ò–ê–¢–£–†–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ===
const mainKb = {
  keyboard: [
    [{ text: "üìÖ –ü–ª–∞–Ω" }, { text: "üìù –û—Ç—á—ë—Ç" }],
    [{ text: "üçΩÔ∏è –ï–¥–∞" }, { text: "üíß +250 –º–ª" }],
    [{ text: "üß≠ –ê–Ω–∫–µ—Ç–∞" }, { text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }],
    [{ text: "‚ùì –ü–æ–º–æ—â—å" }]
  ],
  resize_keyboard: true,
  is_persistent: true
};

// === –•–ï–ù–î–õ–ï–†–´ ===
bot.on('message', (msg) => {
  console.log('Handler saw message:', msg.message_id, msg.text);
  if (!msg.text) return;
  
  const t = msg.text;
  
  // –ö–Ω–æ–ø–∫–∞ "üìÖ –ü–ª–∞–Ω"
  if (t === "üìÖ –ü–ª–∞–Ω") {
    const u = ensureUser(msg.chat.id);
    if (!u.plan) {
      return bot.sendMessage(u.chatId, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ ¬´üß≠ –ê–Ω–∫–µ—Ç–∞¬ª ‚Äî —Å–æ–±–µ—Ä—É –ø–ª–∞–Ω –∑–∞ 2 –º–∏–Ω—É—Ç—ã.");
    }

    const start = new Date(u.plan_start);
    const end   = new Date(u.plan_end);
    const days  = u.plan.days_per_week;
    const scheme = u.plan.workouts.join(" ¬∑ ");

    bot.sendMessage(u.chatId,
      `–¢–≤–æ–π –ø–ª–∞–Ω (30 –¥–Ω–µ–π)\n` +
      `–ü–µ—Ä–∏–æ–¥: ${start.toLocaleDateString()} ‚Äî ${end.toLocaleDateString()}\n` +
      `–¶–µ–ª—å: ${u.plan.goal}\n` +
      `–°–∏–ª–æ–≤—ã–µ: ${days}√ó/–Ω–µ–¥ (${u.plan.session_length}), —Å—Ö–µ–º–∞: ${scheme}\n` +
      `–ö–∞—Ä–¥–∏–æ: Z2 –ø–æ 20‚Äì30 –º–∏–Ω 2‚Äì3√ó/–Ω–µ–¥ (–ø–æ—Å–ª–µ —Å–∏–ª–æ–≤–æ–π)\n` +
      `–ü–∏—Ç–∞–Ω–∏–µ: ~${u.plan.daily_kcal} –∫–∫–∞–ª/–¥–µ–Ω—å, –±–µ–ª–æ–∫ ${u.plan.protein_g_per_kg} –≥/–∫–≥\n` +
      `–í–æ–¥–∞: ~${u.plan.water_goal_ml} –º–ª, —Å–æ–Ω ‚©æ ${u.plan.sleep_goal_h} —á`
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–Ω–∫–µ—Ç—ã
  const st = onbState[msg.chat.id];
  if (st) {
    const step = ONB_QUESTIONS[st.i];
    if (!step) return;

    const { ok, err, val } = validate(step, msg.text);
    if (!ok) return bot.sendMessage(msg.chat.id, err);

    st.answers[step.key] = val;
    st.i += 1;

    if (st.i < ONB_QUESTIONS.length) {
      askNext(msg.chat.id);
    } else {
      // –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ ‚Üí —Å–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω
      const built = createPlanFromAnswers(st.answers);
      const u = ensureUser(msg.chat.id);
      setUser(u.chatId, { ...built, name: st.answers.name || u.name || msg.from.first_name });

      delete onbState[msg.chat.id];
      bot.sendMessage(u.chatId,
        `–ü–ª–∞–Ω –≥–æ—Ç–æ–≤ ‚úÖ\n\n` +
        `–¶–µ–ª—å: ${built.plan.goal}\n` +
        `–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/–Ω–µ–¥: ${built.plan.days_per_week} (${built.plan.session_length})\n` +
        `–ö–∫–∞–ª/–¥–µ–Ω—å: ~${built.plan.daily_kcal}\n` +
        `–ë–µ–ª–æ–∫: ${built.plan.protein_g_per_kg} –≥/–∫–≥\n` +
        `–í–æ–¥–∞: ~${built.plan.water_goal_ml} –º–ª\n` +
        `–°–æ–Ω: ‚©æ${built.plan.sleep_goal_h} —á\n` +
        `–°—Ö–µ–º–∞ —Å–∏–ª–æ–≤—ã—Ö: ${built.plan.workouts.join(" ¬∑ ")}`,
        { reply_markup: mainKb }
      );
    }
    return;
  }
});

bot.onText(/^\/start$/, async (msg) => {
  const u = ensureUser(msg.chat.id);
  if (!u.plan) {
    const answers = {
      sex: u.sex || "–ú", 
      age: u.age || 30, 
      weight_kg: u.weight_kg || 75, 
      height_cm: u.height_cm || 175,
      steps_level: u.steps_level || "5‚Äì8k",
      goal: u.goal || "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è",
      days_per_week: u.days_per_week || 3, 
      session_length: u.session_length || "60 –º–∏–Ω",
      equipment: u.equipment || [], 
      dislikes: u.dislikes || []
    };
    const built = createPlanFromAnswers(answers);
    setUser(u.chatId, { ...built, name: u.name || msg.from.first_name });
  }
  const user = ensureUser(msg.chat.id);
  bot.sendMessage(msg.chat.id, welcomeText(user), { 
    parse_mode: 'HTML', 
    reply_markup: mainKb 
  });
  await ensureHubMessage(bot, ensureUser(msg.chat.id), 'home');
  // –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∫—Ä–µ–∞—Ç–∏–Ω:
  // askCreatine(msg.chat.id);
});

// –°—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã
bot.onText(/^üß≠ –ê–Ω–∫–µ—Ç–∞$/, (msg) => {
  onbState[msg.chat.id] = { i:0, answers:{} };
  askNext(msg.chat.id);
});

// === HTTP-–º–∞—Ä—à—Ä—É—Ç—ã ===
app.use((req, _res, next) => { console.log('HTTP', req.method, req.url); next(); });

app.post(PATH, (req, res) => {
  // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç Telegram
  if (req.get('X-Telegram-Bot-Api-Secret-Token') !== SECRET) {
    console.warn('Bad secret header'); return res.sendStatus(401);
  }
  console.log('Update:', req.body.update_id, req.body?.message?.text);
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.get('/', (_req, res) => res.status(200).send('OK'));

// === –°—Ç–∞—Ä—Ç –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
app.listen(PORT, '0.0.0.0', async () => {
  // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—É—é –ø—Ä–∏–≤—è–∑–∫—É
  await fetch(`https://api.telegram.org/bot${TOKEN}/deleteWebhook`, { method: 'POST' });
  // —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é –ø—Ä–∏–≤—è–∑–∫—É —Å —Å–µ–∫—Ä–µ—Ç–æ–º –∏ –Ω—É–∂–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞–ø–¥–µ–π—Ç–æ–≤
  await bot.setWebHook(hookUrl, {
    allowed_updates: ['message', 'callback_query'],
    secret_token:     SECRET,  // Telegram –ø—Ä–∏—à–ª—ë—Ç —ç—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
    drop_pending_updates: true
  });
  console.log('Webhook url:', hookUrl);
  console.log('Server listening on', PORT);
});
